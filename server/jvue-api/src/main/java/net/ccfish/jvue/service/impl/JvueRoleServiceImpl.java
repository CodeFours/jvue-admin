package net.ccfish.jvue.service.impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import net.ccfish.common.jpa.JpaRestrictions;
import net.ccfish.common.jpa.SearchCriteria;
import net.ccfish.jvue.model.JvueMenu;
import net.ccfish.jvue.model.JvueModule;
import net.ccfish.jvue.model.JvueRole;
import net.ccfish.jvue.model.JvueRoleApi;
import net.ccfish.jvue.model.JvueRoleMenu;
import net.ccfish.jvue.model.JvueRoleSegment;
import net.ccfish.jvue.repository.JvueModuleRepository;
import net.ccfish.jvue.repository.JvueRoleApiRepository;
import net.ccfish.jvue.repository.JvueRoleMenuRepository;
import net.ccfish.jvue.repository.JvueRoleRepository;
import net.ccfish.jvue.repository.JvueRoleSegmentRepository;
import net.ccfish.jvue.service.JvueRoleService;
import net.ccfish.jvue.vm.ModuleAndMenus;
import net.ccfish.jvue.vm.RoleMenuDetails;

/**
 * Generated by Spring Data Generator on 31/01/2018
 */
@Service
@Transactional
public class JvueRoleServiceImpl implements JvueRoleService {

    private JvueRoleRepository jvueRoleRepository;

    @Autowired
    private JvueModuleRepository jvueModuleRepository;
    
    @Autowired
    private JvueRoleApiRepository jvueRoleApiRepository;
    
    @Autowired
    private JvueRoleMenuRepository jvueRoleMenuRepository;
    
    @Autowired
    private JvueRoleSegmentRepository jvueRoleSegmentRepository;

    @Autowired
    public JvueRoleServiceImpl(JvueRoleRepository jvueRoleRepository) {
        this.jvueRoleRepository = jvueRoleRepository;
    }

    @Override
    public JpaRepository<JvueRole, Integer> jpaRepository() {
        return this.jvueRoleRepository;
    }

    @Override
    @Cacheable(value = "role-menu", key = "#roles")
    public ModuleAndMenus<Integer> findModuleAndMenu(List<Integer> roles) {

        // 根据权限查询对应的菜单和modules/segments
        ModuleAndMenus<Integer> moduleAndMenus = new ModuleAndMenus<>();
        SearchCriteria<JvueRoleMenu> roleMenuCriterias = new SearchCriteria<>();
        roleMenuCriterias.add(JpaRestrictions.in("role.id", roles, false));
        
        List<JvueRoleMenu> roleMenus = jvueRoleMenuRepository.findAll(roleMenuCriterias);
        List<JvueMenu>  menus = roleMenus.stream().map(roleMenu -> roleMenu.getMenu()).collect(Collectors.toList());

        List<Integer> moduleIds = menus.stream().map(menu -> menu.getModuleId()).distinct()
                .collect(Collectors.toList());

        List<JvueModule> modules = jvueModuleRepository.findAllById(moduleIds);

        // 查询角色对应的segments
        MultiValueMap<Integer, Integer> segmentMap = new LinkedMultiValueMap<>();
        SearchCriteria<JvueRoleSegment> roleSegmentCriterias = new SearchCriteria<>();
        roleSegmentCriterias.add(JpaRestrictions.in("role.id", roles, false));
        List<JvueRoleSegment> roleSegments = jvueRoleSegmentRepository.findAll(roleSegmentCriterias);
        
        for (JvueRoleSegment rs: roleSegments) {
            segmentMap.add(rs.getSegment().getMenuId(), rs.getSegment().getSegmentId());
        }
        
        // 生成返回结果
        moduleAndMenus.setMenus(menus);
        moduleAndMenus.setModules(modules);
        moduleAndMenus.setSegments(segmentMap);

        return moduleAndMenus;
    }

    /* (non-Javadoc)
     * @see net.ccfish.jvue.service.JvueRoleService#updateEnabled(java.lang.Integer, byte)
     */
    @Override
    public JvueRole updateEnabled(Integer id, byte enabled) {
        
        Optional<JvueRole> jvueRoleOptional = jvueRoleRepository.findById(id);
                
        if (jvueRoleOptional.isPresent()) {
            JvueRole jvueRole = jvueRoleOptional.get();
            jvueRole.setEnabled(enabled);
            return jvueRoleRepository.save(jvueRole);
        }

        return null;
    }

    /* (non-Javadoc)
     * @see net.ccfish.jvue.service.JvueRoleService#rolesByApi(java.lang.Integer)
     */
    @Override
    @Cacheable(value = "role-api", key = "#apiId")
    public List<Integer> getRolesByApi(Integer apiId) {
        SearchCriteria<JvueRoleApi> roleApiCriteria = new SearchCriteria<>();
        roleApiCriteria.add(JpaRestrictions.eq("api.apiId", apiId, false));
        
        List<JvueRoleApi> jvueRoleApis = jvueRoleApiRepository.findAll(roleApiCriteria);
        return jvueRoleApis.stream().map(roleApi -> roleApi.getRole().getId()).collect(Collectors.toList());
    }

    /* (non-Javadoc)
     * @see net.ccfish.jvue.service.JvueRoleService#getRoleInfo(java.lang.Integer)
     */
    @Override
    public RoleMenuDetails<Integer> getRoleInfo(Integer id) {

        // 根据权限查询对应的菜单和modules/segments
        RoleMenuDetails<Integer> moduleAndMenus = new RoleMenuDetails<>();
        SearchCriteria<JvueRoleMenu> roleMenuCriterias = new SearchCriteria<>();
        roleMenuCriterias.add(JpaRestrictions.eq("role.id", id, false));
        
        List<JvueRoleMenu> roleMenus = jvueRoleMenuRepository.findAll(roleMenuCriterias);
        List<JvueMenu>  menus = roleMenus.stream().map(roleMenu -> roleMenu.getMenu()).collect(Collectors.toList());

        List<Integer> moduleIds = menus.stream().map(menu -> menu.getModuleId()).distinct()
                .collect(Collectors.toList());

        List<JvueModule> modules = jvueModuleRepository.findAllById(moduleIds);

        // 查询角色对应的segments
        MultiValueMap<Integer, Integer> segmentMap = new LinkedMultiValueMap<>();
        SearchCriteria<JvueRoleSegment> roleSegmentCriterias = new SearchCriteria<>();
        roleSegmentCriterias.add(JpaRestrictions.eq("role.id", id, false));
        List<JvueRoleSegment> roleSegments = jvueRoleSegmentRepository.findAll(roleSegmentCriterias);
        
        for (JvueRoleSegment rs: roleSegments) {
            segmentMap.add(rs.getSegment().getMenuId(), rs.getSegment().getSegmentId());
        }
        
        
        // 查询角色对应的API
        MultiValueMap<Integer, Integer> apiMap = new LinkedMultiValueMap<>();
        SearchCriteria<JvueRoleApi> roleApiCriterias = new SearchCriteria<>();
        roleApiCriterias.add(JpaRestrictions.eq("role.id", id, false));
        List<JvueRoleApi> roleApis = jvueRoleApiRepository.findAll(roleApiCriterias);
        
        for (JvueRoleApi rs: roleApis) {
            apiMap.add(rs.getApi().getMenuId(), rs.getApi().getApiId());
        }
        
        moduleAndMenus.setMenus(menus);
        moduleAndMenus.setModules(modules);
        moduleAndMenus.setSegments(segmentMap);
        moduleAndMenus.setApis(apiMap);

        return moduleAndMenus;
    
    }


    // TODO
    // 开发/调试模式下，开发者等特殊角色可以无视enabled直接启用，方便调试画面
    
}
